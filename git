Git  常用的几个命令：
我们本地的工作区，git自动给出一个master分支，( .git )为版本库
1. 显示从最近到最远的提交日志
	git log
2.切换到指定分支：（my-fenzhi）
	git branch         //切换到所有分支
3.文件往Git版本库里添加（一）
	git add    //添加文件，实际上把文件修改添加到暂存区（Stage）；
4.文件往Git版本库里添加（二）
	git commit 提交更改，实际上把暂存区的所有内容提交到当前分支（master，非远程的master）

- [x] 第一次修改 -> git add -> 第二次修改 -> git commit；
	这个时候的commit提交的是第一次的修改，第二次的修改不会被提交。

- [x] 第一次修改 -> git add -> 第二次修改 -> git add -> git commit
	第二次的修改被提交。
	git commit -a

每次修改，如果不add到暂存区，那就不会加入到commit中。
提交后，用 git diff HEAD  命令可以查看工作区和版本库里面最新版本的区别

5. git checkout
- [x] git checkout  是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
- [x] git checkout   -- file  可以丢弃工作区的修改：
	git checkout  是让这个文件回到最近一次 git commit 或 git add 时的状态。
- [x] git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

5.创建dev分支，然后切换到dev分支：
	git branch  dev  创建分支
	git checkout  dev  切换分支
	git checkout -b dev  创建、切换分支
	git checkout -m ‘内容’
 	git branch -d <name> 删除分支


查看分支  git branch           ／／git branch  命令会列出所有分支，当前分支前面会标一个*号。
创建分支  git branch <name>
切换分支  git checkout <name>
创建、切换分支 git checkout -b <name>
修改内容
git add  .
git commit -m  “解决冲突－bug”   commit  加上-m参数，把commit描述写进去
某分支合并到当前分支  git merge <name>    （一般是切换到master，再git merge dev,即将dev分支合并到master ）
删除分支 git branch -d <name>

git merge 合并分支命令用于合并指定分支到当前分支。

6.git rm 用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

7.git push 推送，把本地库的内容推送到远程
git push origin master 将本地的master 的内容推送到远程 master
git push origin luodiye 将本地的luodiye 的内容推送到远程 luodiye

8.   要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：

	git checkout -b dev origin/dev

	再git push origin dev push到远程

当两个人都有提交，产生冲突：
用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
 git branch --set-upstream dev origin/dev
git pull  抓取


http://www.jb51.net/article/55442.htm